// Code generated by protoc-gen-plug. DO NOT EDIT.

package example

import (
	fmt "fmt"
	plug "github.com/elliotmr/plug"
	proto "google.golang.org/protobuf/proto"
)

const (
	GetService plug.Service = 0
	PutService plug.Service = 1
)

type KV interface {
	Get(key string) ([]byte, error)
	Put(key string, value []byte) error
}

type KVPlugin struct {
	Impl KV
}

func (x *KVPlugin) Link(srv plug.Service) (proto.Message, plug.GenPluginMethod, error) {
	switch srv {
	case GetService:
		return &GetRequest{}, x.Get, nil
	case PutService:
		return &PutRequest{}, x.Put, nil
	}
	return nil, nil, fmt.Errorf("unknown service: %d", srv)
}

func (x *KVPlugin) Get(req proto.Message) (proto.Message, error) {
	in, ok := req.(*GetRequest)
	if !ok {
		return nil, fmt.Errorf("invalid request type")
	}
	value, err := x.Impl.Get(in.Key)
	return &GetResponse{Value: value}, err
}

func (x *KVPlugin) Put(req proto.Message) (proto.Message, error) {
	in, ok := req.(*PutRequest)
	if !ok {
		return nil, fmt.Errorf("invalid request type")
	}
	err := x.Impl.Put(in.Key, in.Value)
	return &Empty{}, err
}

type KVHost struct {
	c *plug.Host
}

func Load(filename string) (*KVHost, error) {
	c, err := plug.LaunchPlugin(filename)
	if err != nil {
		return nil, fmt.Errorf("unable to load plugin: %w", err)
	}
	return &KVHost{c: c}, nil
}

func (x *KVHost) Get(key string) ([]byte, error) {
	resp := &GetResponse{}
	err := x.c.SendRecv(GetService, &GetRequest{Key: key}, resp)
	return resp.Value, err
}

func (x *KVHost) Put(key string, value []byte) error {
	resp := &Empty{}
	err := x.c.SendRecv(PutService, &PutRequest{Key: key, Value: value}, resp)
	return err
}
